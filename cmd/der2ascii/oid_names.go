// Copyright 2016 The DER ASCII Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import "bytes"

var oidNames = []struct {
	oid  []byte
	name string
}{
	// Named curves.
	{[]byte{0x2b, 0x81, 0x04, 0x00, 0x21}, "secp224r1"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07}, "secp256r1"},
	{[]byte{0x2b, 0x81, 0x04, 0x00, 0x22}, "secp384r1"},
	{[]byte{0x2b, 0x81, 0x04, 0x00, 0x23}, "secp521r1"},

	// Specified curve encodings.
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01}, "prime-field"},

	// Hash algorithms.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x02}, "md2"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x04}, "md4"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05}, "md5"},
	{[]byte{0x2b, 0x0e, 0x03, 0x02, 0x1a}, "sha1"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04}, "sha224"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01}, "sha256"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02}, "sha384"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03}, "sha512"},

	// RSA-PSS mask generation algorithms.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x08}, "mgf1"},

	// X.509 SubjectPublicKeyInfo types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01}, "rsaEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0a}, "rsassa-pss"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01}, "ecPublicKey"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x38, 0x04, 0x01}, "dsa"},
	{[]byte{0x2b, 0x65, 0x6e}, "x25519"},
	{[]byte{0x2b, 0x65, 0x6f}, "x448"},

	// X.509 signature algorithm types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x02}, "md2WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x03}, "md4WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x04}, "md5WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05}, "sha1WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0e}, "sha224WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b}, "sha256WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c}, "sha384WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0d}, "sha512WithRSAEncryption"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x38, 0x04, 0x03}, "dsa-with-sha1"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x01}, "dsa-with-sha224"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x02}, "dsa-with-sha256"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x01}, "ecdsa-with-SHA1"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x01}, "ecdsa-with-SHA224"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02}, "ecdsa-with-SHA256"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03}, "ecdsa-with-SHA384"},
	{[]byte{0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x04}, "ecdsa-with-SHA512"},
	{[]byte{0x2b, 0x65, 0x70}, "ed25519"},
	{[]byte{0x2b, 0x65, 0x71}, "ed448"},

	// X.509 extensions.
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01}, "authorityInfoAccess"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x0b}, "subjectInfoAccess"},
	{[]byte{0x55, 0x1d, 0x09}, "subjectDirectoryAttributes"},
	{[]byte{0x55, 0x1d, 0x0e}, "subjectKeyIdentifier"},
	{[]byte{0x55, 0x1d, 0x0f}, "keyUsage"},
	{[]byte{0x55, 0x1d, 0x10}, "privateKeyUsagePeriod"},
	{[]byte{0x55, 0x1d, 0x11}, "subjectAltName"},
	{[]byte{0x55, 0x1d, 0x12}, "issuerAltName"},
	{[]byte{0x55, 0x1d, 0x13}, "basicConstraints"},
	{[]byte{0x55, 0x1d, 0x14}, "cRLNumber"},
	{[]byte{0x55, 0x1d, 0x15}, "reasonCode"},
	{[]byte{0x55, 0x1d, 0x17}, "instructionCode"},
	{[]byte{0x55, 0x1d, 0x18}, "invalidityDate"},
	{[]byte{0x55, 0x1d, 0x1b}, "deltaCRLIndicator"},
	{[]byte{0x55, 0x1d, 0x1c}, "issuingDistributionPoint"},
	{[]byte{0x55, 0x1d, 0x1d}, "certificateIssuer"},
	{[]byte{0x55, 0x1d, 0x1e}, "nameConstraints"},
	{[]byte{0x55, 0x1d, 0x1f}, "cRLDistributionPoints"},
	{[]byte{0x55, 0x1d, 0x20}, "certificatePolicies"},
	{[]byte{0x55, 0x1d, 0x21}, "policyMappings"},
	{[]byte{0x55, 0x1d, 0x23}, "authorityKeyIdentifier"},
	{[]byte{0x55, 0x1d, 0x24}, "policyConstraints"},
	{[]byte{0x55, 0x1d, 0x25}, "extKeyUsage"},
	{[]byte{0x55, 0x1d, 0x2e}, "freshestCRL"},
	{[]byte{0x55, 0x1d, 0x36}, "inhibitAnyPolicy"},

	// X.509 extended key usages.
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01}, "serverAuth"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02}, "clientAuth"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03}, "codeSigning"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x04}, "emailProtection"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x08}, "timeStamping"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x09}, "OCSPSigning"},
	{[]byte{0x55, 0x1d, 0x25, 0x00}, "anyExtendedKeyUsage"},

	// X.509 policy IDs.
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02}, "unotice"},
	{[]byte{0x55, 0x1d, 0x20, 0x00}, "anyPolicy"},
	{[]byte{0x67, 0x81, 0x0c, 0x01, 0x02, 0x01}, "domain-validated"},
	{[]byte{0x67, 0x81, 0x0c, 0x01, 0x02, 0x02}, "organization-validated"},
	{[]byte{0x67, 0x81, 0x0c, 0x01, 0x02, 0x03}, "individual-validated"},

	// X.509 AccessDescription types.
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01}, "ocsp"},
	{[]byte{0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02}, "caIssuers"},

	// X.520 naming attributes.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01}, "emailAddress"},
	{[]byte{0x55, 0x04, 0x03}, "commonName"},
	{[]byte{0x55, 0x04, 0x05}, "serialNumber"},
	{[]byte{0x55, 0x04, 0x06}, "countryName"},
	{[]byte{0x55, 0x04, 0x07}, "localityName"},
	{[]byte{0x55, 0x04, 0x08}, "stateOrProvinceName"},
	{[]byte{0x55, 0x04, 0x09}, "streetAddress"},
	{[]byte{0x55, 0x04, 0x0a}, "organizationName"},
	{[]byte{0x55, 0x04, 0x0b}, "organizationUnitName"},
	{[]byte{0x55, 0x04, 0x0c}, "title"},
	{[]byte{0x55, 0x04, 0x11}, "postalCode"},

	// PKCS #5 OIDs.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x01}, "pbeWithMD2AndDES-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x03}, "pbeWithMD5AndDES-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x04}, "pbeWithMD2AndRC2-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x06}, "pbeWithMD5AndRC2-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x0a}, "pbeWithSHA1AndDES-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x0b}, "pbeWithSHA1AndRC2-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x0c}, "PBKDF2"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x0d}, "PBES2"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x05, 0x0e}, "PBMAC1"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x07}, "hmacWithSHA1"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x08}, "hmacWithSHA224"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x09}, "hmacWithSHA256"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x0a}, "hmacWithSHA384"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x0b}, "hmacWithSHA512"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x03, 0x02}, "RC2-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x03, 0x07}, "DES-EDE3-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x03, 0x09}, "RC5-CBC-Pad"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x02}, "AES-128-CBC"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x16}, "AES-192-CBC"},
	{[]byte{0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x2a}, "AES-256-CBC"},

	// PKCS #7 content types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01}, "data"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x02}, "signedData"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x03}, "envelopedData"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x04}, "signedAndEnvelopedData"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x05}, "digestedData"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x06}, "encryptedData"},

	// PKCS #9 S/MIME capabilities.
	{[]byte{0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x03}, "contentType"},
	{[]byte{0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x05}, "signing-time"},
	{[]byte{0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x04}, "messageDigest"},
	{[]byte{0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x0f}, "smimeCapabilities"},
	{[]byte{0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x10, 0x02, 0x0B}, "id-aa-encrypKeyPref"},

	// S/MIME capabilities.
	{[]byte{0x2B, 0x0E, 0x03, 0x02, 0x07}, "desCBC"},

	// PKCS #12 bag types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x01}, "keyBag"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x02}, "pkcs-8ShroudedKeyBag"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x03}, "certBag"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x04}, "crlBag"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x05}, "secretBag"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x06}, "safeContentsBag"},

	// PKCS #12 attribute types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x14}, "friendlyName"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x15}, "localKeyId"},

	// PKCS #12 PBE types.
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x01}, "pbeWithSHAAnd128BitRC4"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x02}, "pbeWithSHAAnd40BitRC4"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x03}, "pbeWithSHAAnd3-KeyTripleDES-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x04}, "pbeWithSHAAnd2-KeyTripleDES-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x05}, "pbeWithSHAAnd128BitRC2-CBC"},
	{[]byte{0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x06}, "pbewithSHAAnd40BitRC2-CBC"},

	// Certificate transparency OIDs.
	{[]byte{0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x02}, "embeddedSCTList"},
	{[]byte{0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x03}, "ctPoison"},
	{[]byte{0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x04}, "ctPrecertificateSigning"},
	{[]byte{0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x05}, "ocspSCTList"},
}

func objectIdentifierToName(oid []byte) (string, bool) {
	for _, entry := range oidNames {
		if bytes.Equal(entry.oid, oid) {
			return entry.name, true
		}
	}
	return "", false
}
